generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  first_name       String           @db.VarChar(50)
  last_name        String           @db.VarChar(50)
  email            String           @unique @db.VarChar(50)
  password         String           @db.VarChar(100)
  role             String           @db.VarChar(20)
  referral_code    String?          @db.VarChar(20)
  profile_picture  String           @db.Text
  created_at       DateTime
  events           Event[]          @relation("UserEvents")
  transactions     Transaction[]    @relation("UserTransactions")
  referralsMades   Referral_log[]   @relation("UserReferrerRelations")
  referralsJoineds Referral_log[]   @relation("UserReferredRelations")
  coupons_usages   Coupon_Usage[]   @relation("UserCouponUsages")
  points           Point[]          @relation("UserPoints")
  Event_Category   Event_Category[]
  Ticket           Ticket[]
  Voucher          Voucher[]
  Coupon           Coupon[]

  @@map("users")
}

model Event_Category {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(50)
  description   String
  created_at    DateTime
  updated_at    DateTime
  created_by_id Int
  events        Event[]  @relation("CategoryEvents")
  created_by    User     @relation(fields: [created_by_id], references: [id])

  @@map("event_categories")
}

model Event {
  id              Int            @id @default(autoincrement())
  organizer_id    Int
  name            String         @db.VarChar(50)
  description     Json?
  category_id     Int
  location        String         @db.VarChar(20)
  start_date      DateTime
  end_date        DateTime
  available_seats Int
  banner_url      String         @db.Text
  status          String         @db.VarChar(20)
  created_at      DateTime
  updated_at      DateTime
  organizer       User           @relation("UserEvents", fields: [organizer_id], references: [id])
  category        Event_Category @relation("CategoryEvents", fields: [category_id], references: [id])
  tickets         Ticket[]       @relation("EventTickets")
  transactions    Transaction[]  @relation("EventTransactions")
  vouchers        Voucher[]      @relation("EventVouchers")

  @@map("events")
}

model Ticket {
  id            Int                 @id @default(autoincrement())
  event_id      Int
  name          String              @db.VarChar(50)
  description   String
  type          String              @db.VarChar(50)
  price         Decimal
  quota         Int
  remaining     Int
  sales_start   DateTime
  sales_end     DateTime
  created_at    DateTime
  updated_at    DateTime
  created_by_id Int
  created_by    User                @relation(fields: [created_by_id], references: [id])
  event         Event               @relation("EventTickets", fields: [event_id], references: [id])
  transactions  TransactionDetail[] @relation("DetailTiket")

  @@map("tickets")
}

model Transaction {
  id             Int                 @id @default(autoincrement())
  code           String              @db.VarChar(100)
  user_id        Int
  event_id       Int
  voucher_id     Int?
  coupon_id      Int?
  voucher_amount Decimal
  point_amount   Decimal
  coupon_amount  Decimal
  final_price    Decimal
  status         String              @db.VarChar(100)
  payment_proof  String              @db.Text
  created_at     DateTime
  updated_at     DateTime
  user           User?                @relation("UserTransactions", fields: [user_id], references: [id])
  event          Event?               @relation("EventTransactions", fields: [event_id], references: [id])
  voucher        Voucher?             @relation("VoucherTransactions", fields: [voucher_id], references: [id])
  coupon         Coupon?              @relation("CouponTransactions", fields: [coupon_id], references: [id])
  reviews        Review[]            @relation("TransactionReviews")
  coupon_usage   Coupon_Usage[]      @relation("TransactionCouponUsages")
  detail         TransactionDetail[] @relation("TrsansactionDetail")
  point_usage    Point_Usage[]     @relation("TransactionPointUsages")

  @@map("transactions")
}

model TransactionDetail {
  id             Int     @id @default(autoincrement())
  transaction_id Int
  ticket_id      Int
  qty            Int
  price          Decimal // per item
  subtotal       Decimal // price Ã— qty

  transaction Transaction @relation("TrsansactionDetail", fields: [transaction_id], references: [id])
  ticket      Ticket      @relation("DetailTiket", fields: [ticket_id], references: [id])

  @@map("transactions_details")
}

model Referral_log {
  id               Int      @id @default(autoincrement())
  referrer_id      Int
  referred_user_id Int
  created_at       DateTime

  referrer     User @relation("UserReferrerRelations", fields: [referrer_id], references: [id])
  referredUser User @relation("UserReferredRelations", fields: [referred_user_id], references: [id])

  @@map("referral_logs")
}

model Voucher {
  id              Int           @id @default(autoincrement())
  event_id        Int
  code            String        @db.VarChar(20)
  description     String
  discount_amount Decimal
  sales_start     DateTime
  sales_end       DateTime
  created_at      DateTime
  updated_at      DateTime
  created_by_id   Int
  created_by      User          @relation(fields: [created_by_id], references: [id])
  event           Event?        @relation("EventVouchers", fields: [event_id], references: [id])
  transactions    Transaction[] @relation("VoucherTransactions")

  @@map("vouchers")
}

model Coupon {
  id              Int            @id @default(autoincrement())
  code            String         @db.VarChar(20)
  discount_amount Decimal
  max_usage       Int
  is_active       Boolean
  created_at      DateTime
  updated_at      DateTime
  expired_at      DateTime
  created_by_id   Int
  created_by      User           @relation(fields: [created_by_id], references: [id])
  coupon_usage    Coupon_Usage[] @relation("CouponCouponUsages")
  transactions    Transaction[]  @relation("CouponTransactions")

  @@map("coupons")
}

model Coupon_Usage {
  id             Int         @id @default(autoincrement())
  coupon_id      Int
  user_id        Int
  transaction_id Int         @unique
  assigned_at    DateTime
  used_at        DateTime
  coupon         Coupon      @relation("CouponCouponUsages", fields: [coupon_id], references: [id])
  user           User        @relation("UserCouponUsages", fields: [user_id], references: [id])
  transaction    Transaction @relation("TransactionCouponUsages", fields: [transaction_id], references: [id])

  @@map("coupon_usages")
}

model Point {
  id          Int           @id @default(autoincrement())
  user_id     Int
  point       Int
  expired_at  DateTime
  created_at  DateTime
  user        User?         @relation("UserPoints", fields: [user_id], references: [id])
  point_usage Point_Usage[] @relation("PointPointUsage")

  @@map("points")
}

model Point_Usage {
  id             Int      @id @default(autoincrement())
  transaction_id Int
  point_id       Int
  used           Int
  usedAt         DateTime @default(now())

  transaction Transaction @relation("TransactionPointUsages", fields: [transaction_id], references: [id])
  point       Point       @relation("PointPointUsage", fields: [point_id], references: [id])

  @@map("points_usage")
}

model Review {
  id             Int          @id @default(autoincrement())
  transaction_id Int
  rating         Int
  comment        String
  created_at     DateTime
  transaction    Transaction? @relation("TransactionReviews", fields: [transaction_id], references: [id])

  @@map("reviews")
}
